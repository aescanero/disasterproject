---
- name: Create namespace
  shell: kubectl create namespace k8dash --dry-run -o yaml | kubectl apply -f -

- name: Create k8dash sa
  shell: "{{ item }}"
  with_items:
    - kubectl create -n k8dash serviceaccount k8dash-sa --dry-run -o yaml | kubectl apply -f -
    - kubectl create clusterrolebinding k8dash-sa --clusterrole=cluster-admin --serviceaccount=k8dash:k8dash-sa --dry-run -o yaml | kubectl apply -f -

- name: Define k8dash
  copy:
    dest: "{{ ansible_env.HOME }}/k8dash.yml"
    content: |
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: k8dash
        namespace: k8dash
      spec:
        ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 4654
        selector:
          app: k8dash
        type: ClusterIP
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app: k8dash
        name: k8dash
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: k8dash
        template:
          metadata:
            labels:
              app: k8dash
          spec:
            serviceAccountName: k8dash-sa
            containers:
            - image: herbrandson/k8dash:latest
              name: k8dash
              ports:
              - containerPort: 4654
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  path: /
                  port: 4654
                initialDelaySeconds: 30
                timeoutSeconds: 30
            nodeSelector:
              'beta.kubernetes.io/os': linux

- name: Configure Service
  shell: kubectl apply -n k8dash -f {{ ansible_env.HOME }}/k8dash.yml

- name: Wait to raise k8dash
  shell: kubectl get pods -n k8dash |grep k8dash|grep Running
  register: test
  retries: 25
  delay: 10
  until: test.stdout != ""

- name: Modify external LoadBalacer
  when: addons_item.publish is defined and "external" in addons_item.publish
  include_role:
    name: services
    tasks_from: external
  vars:
    service: k8dash
    externalport: 80
    internalport: 4654
    protocol: "TCP"
    namespace: "k8dash"
    label: "k8s-app"

- name: Modify ingress route
  when: addons_item.publish is defined and "route" in addons_item.publish
  include_role:
    name: ingress
    tasks_from: ingress_add_route
  vars:
    service: k8dash
    route: "/"
    internalport: 80
    namespace: "k8dash"

- name: Obtain dashboard IP
  when: addons_item.publish is defined and "external" in addons_item.publish
  shell: kubectl get service -n k8dash k8dash -o jsonpath='{.status.loadBalancer.ingress[].ip}'
  register: k8dash_ip

- name: Obtain dashboard Token
  when: master_name is defined and master_name.stdout == inventory_hostname
  shell: kubectl get secret `kubectl get secret|grep ^k8dash|awk '{print $1}'` -o jsonpath="{.data.token}"|base64 -d
  register: k8dash_token

- name: HOW TO ACCESS TO DASHBOARD
  when: addons_item.publish is defined and "external" in addons_item.publish
  debug:
    msg: |
      Things left to do:
        - Access to https://{{k8dash_ip.stdout}}
        - Use the next token to access dashboard: {{k8dash_token.stdout}}

- name: HOW TO ACCESS TO DASHBOARD
  when: addons_item.publish is defined and "route" in addons_item.publish
  debug:
    msg: |
      Things left to do:
        - Access to https://k8dash.{{ domain }}
        - Use the next token to access dashboard: {{k8dash_token.stdout}}
...
