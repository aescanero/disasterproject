---
- name: Add kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: yes
    state: present

- sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_set: yes
    state: present

- name: Update repositories cache and install dirmngr and curl packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - ebtables
    - ethtool 
    - curl
    - socat
    - libseccomp2
    - conntrack
    - ipvsadm
  when: ansible_os_family == "Debian"

- name: Update repositories cache and install kubernetes dependences
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - ebtables
    - ethtool 
    - curl
    - socat
    - libseccomp
    - conntrack-tools
    - ipvsadm
  when: ansible_os_family == "Redhat"

- name: Creates directory cni
  file:
    path: /opt/cni/bin
    state: directory

- name: Install last CNI version
  when: network_controller is defined
  shell: curl -LSs https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgz |tar --no-overwrite-dir -C /opt/cni/bin -xz
  args:
    warn: no

- name: Check that the k3s binary exists
  stat:
    path: /usr/bin/k3s
  register: k3s_stat_result

- name: install k3s
  when: k3s_stat_result.stat.exists == false
  get_url:
    url: https://github.com/rancher/k3s/releases/latest/download/k3s
    dest: /usr/bin/k3s
    mode: '0755'
    username: root
    group: root

- name: obtiene el nombre del master
  command: echo "{{ inventory_hostname }}"
  register: master_name
  run_once: true
  when: master_name is not defined

- name: Create kubectl alias
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  copy:
    dest: "/usr/bin/kubectl"
    mode: '0755'
    content: |
      #!/bin/sh
      /usr/bin/k3s kubectl "$@"

- name: Check that the k3s master service exists
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  stat:
    path: /etc/systemd/system/k3smaster.service
  register: k3s_master_service_stat

- name: install /etc/systemd/system/k3smaster.service on master
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_master_service_stat.stat.exists == false and ingress is defined and "traefik" not in ingress and network_controller is not defined
  run_once: true
  copy:
    dest: /etc/systemd/system/k3smaster.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s server --service-cidr 10.43.0.0/16 --cluster-domain {{ domain }} --no-deploy servicelb --no-deploy traefik --bind-address {{ vm_ip }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/systemd/system/k3smaster.service on master
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_master_service_stat.stat.exists == false and ingress is defined and "traefik" not in ingress and network_controller is defined
  run_once: true
  copy:
    dest: /etc/systemd/system/k3smaster.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s server --service-cidr 10.43.0.0/16 --cluster-domain {{ domain }} --no-flannel --no-deploy servicelb --no-deploy traefik --bind-address {{ vm_ip }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/systemd/system/k3smaster.service on master
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_master_service_stat.stat.exists == false and ( ingress is not defined or "traefik" in ingress ) and network_controller is not defined
  run_once: true
  copy:
    dest: /etc/systemd/system/k3smaster.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s server --service-cidr 10.43.0.0/16 --cluster-domain {{ domain }} --no-deploy servicelb --bind-address {{ vm_ip }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/systemd/system/k3smaster.service on master
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_master_service_stat.stat.exists == false and ( ingress is not defined or "traefik" in ingress ) and network_controller is defined
  run_once: true
  copy:
    dest: /etc/systemd/system/k3smaster.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s server --service-cidr 10.43.0.0/16 --cluster-domain {{ domain }} --no-flannel --no-deploy traefik --no-deploy servicelb --bind-address {{ vm_ip }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: enable and start k3smaster service on master
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  systemd:
    name: k3smaster
    daemon_reload: yes
    enabled: yes
    masked: no
    state: started

- name: Wait to raise k3s master
  run_once: true
  when: master_name is defined and master_name.stdout == inventory_hostname
  shell: kubectl get nodes |grep "{{ inventory_hostname }}"|grep Ready
  register: test
  retries: 25
  delay: 10
  until: test.stdout != ""

- name: Creates directory
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_stat_result.stat.exists == false
  run_once: true
  file:
    path: ~/.kube
    state: directory

- name: Configure config for kubectl
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_stat_result.stat.exists == false
  run_once: true
  shell: cp -i /etc/rancher/k3s/k3s.yaml "{{ ansible_env.HOME }}"/.kube/config

- debug: var=network_controller

- name: Install network_controller
  when: network_controller is defined and master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  include_role:
    name: network
    tasks_from: "{{ network_controller }}"

- name: Install storage_controller
  when: storage is defined and master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  include_role:
    name: storage
    tasks_from: "{{ storage }}"

- name: Define a default external pool for Kubernetes
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_stat_result.stat.exists == false
  run_once: true
  copy:
    dest: "{{ ansible_env.HOME }}/pool.yml"
    content: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: metallb-system
        name: config
      data:
        config: |
          address-pools:
          - name: my-ip-space
            protocol: layer2
            addresses:
            - {{ network }}.240/28

- name: Create auxiliar system account for administration
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_stat_result.stat.exists == false
  run_once: true
  shell: "{{ item }}"
  with_items:
    - kubectl create serviceaccount -n kube-system helm-install-sa --dry-run -o yaml | kubectl apply -f -
    - kubectl create clusterrolebinding helm-install-sa --clusterrole=cluster-admin --serviceaccount=kube-system:helm-install-sa --dry-run -o yaml | kubectl apply -f -

- name: Install MetalLB Load Balancer
  when: master_name is defined and master_name.stdout == inventory_hostname and k3s_stat_result.stat.exists == false
  run_once: true
  shell: "{{ item }}"
  with_items:
    - kubectl apply -f "https://raw.githubusercontent.com/danderson/metallb/master/manifests/metallb.yaml"
    - kubectl apply -f {{ ansible_env.HOME }}/pool.yml

- name: Install default ingress
  when: ingress is not defined and master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  include_role:
    name: ingress
    tasks_from: main
  vars:
    ingress_item:
      name: "traefik"
  
- name: Install ingress
  when: ingress is defined and master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  include_role:
    name: ingress
    tasks_from: main
  with_items: "{{ ingress }}"
  loop_control:
    loop_var: ingress_item

- name: Load k3s token into variable
  when: master_name is defined and master_name.stdout == inventory_hostname
  slurp:
    src: "/var/lib/rancher/k3s/server/node-token"
  register: token
  run_once: true

- debug: var=token

- name: Check that the k3s node service exists
  when: master_name is defined and master_name.stdout != inventory_hostname
  stat:
    path: /etc/systemd/system/k3s.service
  register: k3s_node_service_stat

- name: install /etc/systemd/system/k3s.service on nodes
  when: master_name is defined and master_name.stdout != inventory_hostname and k3s_node_service_stat.stat.exists == false and network_controller is not defined
  copy:
    dest: /etc/systemd/system/k3s.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s agent --server https://{{ master_name.stdout }}:6443 --token {{ token.content |  b64decode }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/systemd/system/k3s.service on nodes
  when: master_name is defined and master_name.stdout != inventory_hostname and k3s_node_service_stat.stat.exists == false and network_controller is defined
  copy:
    dest: /etc/systemd/system/k3s.service
    content: |
      [Unit]
      Description=k3s
      
      [Service]
      ExecStart=/usr/bin/k3s agent --server https://{{ master_name.stdout }}:6443 --token {{ token.content |  b64decode }}
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: enable and start k3s service on nodes
  when: master_name is defined and master_name.stdout != inventory_hostname
  systemd:
    name: k3s
    daemon_reload: yes
    enabled: yes
    masked: no
    state: started

- name: Wait to raise k3s nodes
  run_once: true
  pause:
    seconds: 20

- name: Install addons
  when: addons is defined and master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  include_role:
    name: addons
    tasks_from: main
  with_items: "{{ addons }}"
  loop_control:
    loop_var: addons_item
...
