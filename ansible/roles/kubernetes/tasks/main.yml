---
- name: Add kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: yes
    state: present

- sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_set: yes
    state: present

- name: Update repositories cache and install dirmngr and curl packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - ebtables
    - ethtool 
    - software-properties-common
    - dirmngr
    - curl
    - socat
    - libseccomp2
    - conntrack
    - ipvsadm
  when: ansible_os_family == "Debian"

- name: Update repositories cache and install kubernetes dependences
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - ebtables
    - ethtool 
    - curl
    - socat
    - libseccomp
    - conntrack-tools
    - ipvsadm
  when: ansible_os_family == "Redhat"

- name: Install last CNI version
  shell: curl -LSs https://storage.googleapis.com/cri-containerd-release/cri-containerd-cni-1.2.7.linux-amd64.tar.gz |tar --no-overwrite-dir -C / -xz
  args:
    warn: no

- name: Obtain the last kubernetes version
  shell: curl -sSL https://dl.k8s.io/release/stable.txt
  register: kubernetes_version
  when: kubernetes_version is not defined
  run_once: true
  args:
    warn: no

- name: install Kubelet and kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version.stdout }}/bin/linux/amd64/{{ item }}
    dest: /usr/bin/{{ item }}
    mode: '0755'
    username: root
    group: root
  with_items:
    - kubelet
    - kubectl

- name: obtiene el nombre del master
  command: echo "{{ inventory_hostname }}"
  register: master_name
  run_once: true
  when: master_name is not defined

- name: install Kubeadm in master
  run_once: true
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version.stdout }}/bin/linux/amd64/kubeadm
    dest: /usr/bin/kubeadm
    mode: '0755'
    username: root
    group: root
  when: master_name is defined and master_name.stdout == inventory_hostname

- name: install /etc/systemd/system/kubelet.service
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  copy:
    dest: /etc/systemd/system/kubelet.service
    content: |
      [Unit]
      Description=kubelet: The Kubernetes Node Agent
      Documentation=http://kubernetes.io/docs/
      
      [Service]
      # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
      EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
      EnvironmentFile=-/etc/default/kubelet
      ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/systemd/system/kubelet.service
  when: master_name is defined and master_name.stdout != inventory_hostname
  copy:
    dest: /etc/systemd/system/kubelet.service
    content: |
      [Unit]
      Description=kubelet: The Kubernetes Node Agent
      Documentation=http://kubernetes.io/docs/
      
      [Service]
      EnvironmentFile=-/etc/default/kubelet
      ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_EXTRA_ARGS
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

- name: install /etc/default/kubelet
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS='--network-plugin=cni --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --node-ip={{ vm_ip }}'
      KUBELET_KUBECONFIG_ARGS='--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf'
      KUBELET_CONFIG_ARGS='--config=/var/lib/kubelet/config.yaml'

- name: install /etc/default/kubelet
  when: master_name is defined and master_name.stdout != inventory_hostname
  copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS='--network-plugin=cni --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --node-ip={{ vm_ip }}'
      KUBELET_KUBECONFIG_ARGS='--bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig --kubeconfig=/var/lib/kubelet/kubeconfig'
      KUBELET_CONFIG_ARGS=''

- name: enable and start containerd service
  systemd:
    name: containerd
    daemon_reload: yes
    enabled: yes
    masked: no
    state: started

#- name: enable and start kubelet service
#  when: master_name is defined and master_name.stdout == inventory_hostname
#  run_once: true
#  systemd:
#    name: kubelet
#    daemon_reload: yes
#    enabled: yes
#    masked: no
#    state: started

- name: execute kubeadm
  shell: kubeadm init --apiserver-advertise-address {{ vm_ip }} --pod-network-cidr=10.244.0.0/16 --cri-socket /run/containerd/containerd.sock  | grep "kubeadm join"|grep token
  register: secret_token
  when: master_name is defined and master_name.stdout == inventory_hostname

- name: Install network drivers
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: "{{ item }}"
  with_items:
    - mkdir  {{ ansible_env.HOME }}/.kube
    - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
    - kubectl apply -f "https://raw.githubusercontent.com/danderson/metallb/master/manifests/metallb.yaml"

- name: Wait to raise network
  pause:
    seconds: 20

- name: Define a default external pool for Kubernetes
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  copy:
    dest: "{{ ansible_env.HOME }}/pool.yml"
    content: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: metallb-system
        name: config
      data:
        config: |
          address-pools:
          - name: my-ip-space
            protocol: layer2
            addresses:
            - 192.168.8.240/28

- name: Define a service for Dashboard
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  copy:
    dest: "{{ ansible_env.HOME }}/service.yml"
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: k8dashlb
        namespace: kube-system
      spec:
        ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 4654
        selector:
          k8s-app: k8dash
        type: LoadBalancer

- name: Configure network pool and Dashboard
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: "{{ item }}"
  with_items:
    - kubectl apply -f {{ ansible_env.HOME }}/pool.yml
    - kubectl apply -f "https://raw.githubusercontent.com/herbrandson/k8dash/master/kubernetes-k8dash.yaml"
    - kubectl apply -f {{ ansible_env.HOME }}/service.yml

- name: Create Service Account initnode
  when: master_name is defined and master_name.stdout == inventory_hostname
  shell: "{{ item }}"
  with_items:
    - kubectl create serviceaccount initnode --namespace=kube-system --dry-run -o yaml >>/tmp/initsecret.yaml
    - echo "---" >>/tmp/initsecret.yaml
    - kubectl create clusterrolebinding initauth --serviceaccount=kube-system:initnode --clusterrole=system:node-bootstrapper -n kube-system --dry-run -o yaml >>/tmp/initsecret.yaml
    - kubectl apply -f /tmp/initsecret.yaml

- name: Get secret initnode
  shell: kubectl get serviceaccount -n kube-system initnode -o=jsonpath="{.secrets[0].name}"
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  register: initnode_secret

- name: Get token initnode
  shell: kubectl get secrets "{{ initnode_secret.stdout }}" -n kube-system -o=jsonpath="{.data.token}"|base64 -d
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  register: initnode_token

- name: Create bootstrap-kubeconfig to add new nodes
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: "{{ item }}"
  with_items:
    - kubectl config set-cluster kubernetes --kubeconfig={{ local_home }}/bootstrap-kubeconfig --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs --server='https://{{ vm_ip }}:6443'
    - kubectl config set-credentials initnode --kubeconfig={{ local_home }}/bootstrap-kubeconfig --token={{initnode_token.stdout}}
    - kubectl config set-context initnode@kubernetes --cluster=kubernetes --user=initnode --kubeconfig={{ local_home }}/bootstrap-kubeconfig
    - kubectl config use-context initnode@kubernetes --kubeconfig={{ local_home }}/bootstrap-kubeconfig
  vars:
    local_home: "{{ ansible_env.HOME }}"

- name: Create k8dash sa
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: "{{ item }}"
  with_items:
    - kubectl create serviceaccount k8dash-sa
    - kubectl create clusterrolebinding k8dash-sa --clusterrole=cluster-admin --serviceaccount=default:k8dash-sa

- name: Load file into variable
  when: master_name is defined and master_name.stdout == inventory_hostname
  slurp:
    src: "{{ local_home }}/bootstrap-kubeconfig"
  register: bootstrap
  run_once: true
  vars:
    local_home: "{{ ansible_env.HOME }}"

- name: Create directory /var/lib/kubelet
  when: master_name is defined and master_name.stdout != inventory_hostname
  file:
    path: /var/lib/kubelet
    state: directory
    mode: '0750'

- copy: 
    content: "{{ bootstrap.content |  b64decode }}"
    dest: /var/lib/kubelet/bootstrap-kubeconfig
  when: master_name is defined and master_name.stdout != inventory_hostname

- name: enable and start kubelet service
  when: master_name is defined and master_name.stdout != inventory_hostname
  systemd:
    name: kubelet
    daemon_reload: yes
    enabled: yes
    masked: no
    state: started

- name: Wait to activate kubernetes nodes
  pause:
    seconds: 20

- name: Approve all certificates to activate all the nodes
  shell: kubectl get certificatesigningrequests.certificates.k8s.io |grep ^node-csr|awk '{print $1}'|while read l;do kubectl certificate approve $l;done
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true

- name: Wait to raise kubernetes nodes
  pause:
    seconds: 40

- name: Obtain dashboard IP
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: kubectl get service -n kube-system k8dashlb -o jsonpath="{.status.loadBalancer.ingress[].ip}"
  register: k8dash_ip

- name: Obtain dashboard Token
  when: master_name is defined and master_name.stdout == inventory_hostname
  run_once: true
  shell: kubectl get secret `kubectl get secret|grep ^k8dash|awk '{print $1}'` -o jsonpath="{.data.token}"|base64 -d
  register: k8dash_token

- name: display post install message
  debug:
    msg: |
      Things left to do:
        - Access to https://{{k8dash_ip.stdout}}
        - Use the next token to access dashboard: {{k8dash_token.stdout}}
...
